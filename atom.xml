<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KatzenyaSax: Hello!</title>
  
  
  <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/"/>
  <updated>2023-10-24T10:02:04.438Z</updated>
  <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/</id>
  
  <author>
    <name>KatzenyaSax</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker的安装及使用</title>
    <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/24/152039/"/>
    <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/24/152039/</id>
    <published>2023-10-24T07:20:39.000Z</published>
    <updated>2023-10-24T10:02:04.438Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目的数据库和中间件都会部署在linux系统上，所以使用docker这一工具。</p><h1 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h1><p>如果嫌麻烦，可以直接安装最新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>安装指定版本可以参考：<a href="https://zhuanlan.zhihu.com/p/143156163">如何在 Ubuntu 20.04 上安装和使用 Docker</a></p><h1 id="docker的运行及配置"><a href="#docker的运行及配置" class="headerlink" title="docker的运行及配置"></a>docker的运行及配置</h1><h2 id="运行docker"><a href="#运行docker" class="headerlink" title="运行docker"></a>运行docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="查看docker现有的镜像"><a href="#查看docker现有的镜像" class="headerlink" title="查看docker现有的镜像"></a>查看docker现有的镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="设置docker开机自启动"><a href="#设置docker开机自启动" class="headerlink" title="设置docker开机自启动"></a>设置docker开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="容器开机自启动"><a href="#容器开机自启动" class="headerlink" title="容器开机自启动"></a>容器开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update (<span class="variable">$docker</span> ps -a -q) --restart=always</span><br></pre></td></tr></table></figure><h2 id="配置下载地址"><a href="#配置下载地址" class="headerlink" title="配置下载地址"></a>配置下载地址</h2><p>docker的配置最主要就是配置下载地址，选用国内的阿里云镜像下载地址，依次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json&lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;htte6jcuw6y. mirror.aliyuncscom&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>参考文献：<a href="https://developer.aliyun.com/article/1245481?spm=a2c6h.14164896.0.0.1a9a47c5JPNQiV&scm=20140722.S_community@@%E6%96%87%E7%AB%A0@@1245481._.ID_1245481-RL_docker%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F-LOC_search~UND~community~UND~item-OR_ser-V_3-">使用阿里云 docker 镜像加速</a></p><h1 id="使用例：docker安装mysql"><a href="#使用例：docker安装mysql" class="headerlink" title="使用例：docker安装mysql"></a>使用例：docker安装mysql</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>也就是下载mysql的标准镜像文件到本地docker库中</p><h2 id="创建mysql实例并运行"><a href="#创建mysql实例并运行" class="headerlink" title="创建mysql实例并运行"></a>创建mysql实例并运行</h2><p>好比java中类的概念，镜像文件就是Bean；docker创建实例的行为就好比Bean的实例化，只有先实例化一个Bean的对象才能够使用其中的方法；而docker的容器就是jvm栈区，用于存放实例化的对象。<br>现在我们试创建一个mysql的实例化并运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name mysql-test -p 3306:3306 -v /mydata/mysql/log:/var/log/mysql -v /mydata/mysql/data:/var/data/mysql -v /mydata/mysql/conf.d:/etc/mysql.d -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure><p>注意这行命令的参数可以体现docker虚拟化的一些特征：<br>-p port1:port2，即将软件在docker的内部端口port2映射到主机（linux设备）的port1端口，意思是访问主机的port1端口，相当于访问docker内部的port2端口；-v &#x2F;file1:&#x2F;file2，即将软件在docker内部的文件映射到本机的存储上，意思是修改主机的file1中的文件，就相当于修改了docker内部file2中的文件，二者具有同等效力；而-e就是mysql常规的参数，配置mysql的密码等。<br>所以为什么docker会给出这些参数呢？因为docker运行的软件是一个黑匣子嘛，里面的所有东西外面都是不好看到的，所以要预留一些特殊通道供外面看到（访问）喽。<br>不过总之是运行起来了</p><p>但是用户也可以手动进入docker内部，例如进入一下mysql的内部文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ID /bin/bash</span><br></pre></td></tr></table></figure><p>-it表示交互关系，ID表示mysql的容器id，运行后docker不是分配了一个id嘛，取前三个就可以了。这里就不多演示了。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>之后写入mysql的配置文件，就在映射的文件 &#x2F;mydata&#x2F;mysql里写一个my.cnf：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">secure_file_priv=/var/lib/mysql</span><br><span class="line">expire_logs_days=7</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DAERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line">max_connections=1000</span><br><span class="line">​</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">​</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>主要是为了配置utf编码</p><h2 id="完成安装"><a href="#完成安装" class="headerlink" title="完成安装"></a>完成安装</h2><p>最后重启容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart ID</span><br></pre></td></tr></table></figure><p>依然是取前三个就行了</p><p>这样就算安装完成了，外部机器访问本机（linux设备）的3306端口就可以访问到mysql了</p><h1 id="使用例：docker安装redis"><a href="#使用例：docker安装redis" class="headerlink" title="使用例：docker安装redis"></a>使用例：docker安装redis</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>拉取镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><h2 id="创建实例并运行"><a href="#创建实例并运行" class="headerlink" title="创建实例并运行"></a>创建实例并运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis-test -p 6379:6379 -v /mydata/redis/data:/data -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>redis默认指定的端口是6379<br>其中-d表示以&#x2F;etc&#x2F;redis&#x2F;redis.conf中的配置文件后台运行，而&#x2F;etc&#x2F;redis&#x2F;redis.conf不是映射到&#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf了吗？所以实际上在外部配置配置文件就可以了。<br>配置就不多说了，最主要的持久化功能新版redis已经默认支持了</p><h2 id="完成安装-1"><a href="#完成安装-1" class="headerlink" title="完成安装"></a>完成安装</h2><p>外部机器访问本机（linux设备）的6379端口就可以访问到redis了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于项目的数据库和中间件都会部署在linux系统上，所以使用docker这一工具。&lt;/p&gt;
&lt;h1 id=&quot;docker的安装&quot;&gt;&lt;a href=&quot;#docker的安装&quot; class=&quot;headerlink&quot; title=&quot;docker的安装&quot;&gt;&lt;/a&gt;docker的安装&lt;</summary>
      
    
    
    
    
    <category term="docker" scheme="https://github.com/KatzenyaSax/KatzenyaSax.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/24/101439/"/>
    <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/24/101439/</id>
    <published>2023-10-24T02:14:26.000Z</published>
    <updated>2023-10-24T09:15:10.321Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
