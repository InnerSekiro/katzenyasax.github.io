<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KatzenyaSax: Hello!</title>
  
  
  <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/"/>
  <updated>2023-10-26T13:27:28.040Z</updated>
  <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/</id>
  
  <author>
    <name>KatzenyaSax</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java三个月：从入门到门长腿跑了</title>
    <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/25/110959/"/>
    <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/25/110959/</id>
    <published>2023-10-25T03:09:59.000Z</published>
    <updated>2023-10-26T13:27:28.040Z</updated>
    
    <content type="html"><![CDATA[<p>算上今天，学java也学了三个月了，感觉还是没啥实感，怎么这么快呢？</p><h2 id="“我怎么会学java呢？”"><a href="#“我怎么会学java呢？”" class="headerlink" title="“我怎么会学java呢？”"></a>“我怎么会学java呢？”</h2><p>实话实说，在正式学java之前，java给我的印象一直是跟风狗、卷、带专哥最爱，当然我学了之后这个刻板印象狠狠地又加深了😂，反正我也是跟风学的java，我就是跟风狗呗？跟风的起因是6月7月份的时候，看见群里水友老是“搓mall搓mall”啥的，我寻思mall是什么玩意，就去搜了，想着自己能不能搞一个出来，然后那天是7月24号，一个无风的傍晚，我对着网上随便招的一个教程干瞪眼，一直持续到晚上吃完饭，我终于理解了，这是一个坑，还是天坑。</p><p>不过好在我立刻就意识到这个项目的语言：java，这个东西以前就整过我，所以我一直对其抱有一种微妙的情绪。我依稀记得小时候为了玩mc，装环境装了一个下午，您能理解一个小学生对着一大堆英文无数次试错吗？总之在此之后java就成了一个背景板的玩意，只要有人问起我就知道，哦java就是写mc的，更多一点我会告诉人这似乎是一款编程的东西，再多一点我就不知道了，反正上大学了，mc也玩的少了，java对我来说也变成了一个可有可无的东西，并且我还非常乐意去看别人有关java已死的言论，一方面java版mc的优化确实烂，另一方面是我本身没能上到计算机专业，于是对计算机有着一种近乎仇视的态度，“电子不比你计算机差！”“硬件不是软件的爹？”我就抱着这种虚假的骄傲对一切与计算机相关的领域一视同仁，java也不例外，“我怎么会学java呢？”成为了我对java最外显的态度。虽然我展现出一幅“不屑学软件”的态度，但我知道这本质上只是吃不到葡萄说葡萄酸罢了。</p><p>在明知这是一个大坑的情况下，我毅然迈步，一方面是出于对未来道路的选择焦虑，另一方面是我确实太菜了，我两年在学过的含金量最高的面向企业的技能居然是电焊。所以几乎是命运一般，我兜兜转转地又回到了java，于是在一个炎热的上午，我顺利搞定了开发环境，正式开启了java的学习，那一天是7月25日。</p><h2 id="“我们称之为高效”"><a href="#“我们称之为高效”" class="headerlink" title="“我们称之为高效”"></a>“我们称之为高效”</h2><p>我先学的javase，我只能庆幸有一点点的c++基础，说到c++，其实我一开始是准备嗯造c++的，但是最后也没有坚持下列，但是java和c++基础的语法都是大差不差的，所以直接开始了各种javase常见api的使用。</p><p>学习的过程倒是没什么好说的，学完javase，看了一下javaweb，粗略了解了一下springboot、mybatis等，也了解了一些有关分布式的知识，javaweb教程上教的是单体项目，典中典之员工管理系统，我想都没想就跳过了，我现在急需的是了解一些含金量更高的知识。在这个时期我逐渐了解到，我要学的mall，并非是一个特定的项目，而是一类项目的通称，我也不知道在哪知道了谷粒商城这个项目不错，也经过了大佬的一些指点，我就将短期目标放在了谷粒商城上，狠狠地补足谷粒商城前置的一些基础条件，可以说在正式进入谷粒商城前，我的学习还是相当平坦的，除了在已经能够使用springboot的前提下花了一整个星期补了一下ssm，最后只留下一脸懵逼的我一脸懵逼，这些东西可能作用很大，但对彼时的我而言算是不太大的帮助，至少没有多少性价比。</p><p>在进入谷粒商城后，时间差不多就来到了正式开学一个星期，虽然也在稳步进展，却始终没有7月25日到开学前效率那么高了，受限于学校事务等，我始终无法像窝在在家一样全身心得投入，在家里，我可以早上9点起床学到12点，下午2点学到6点，晚上再从11点学的1点，每天基本上保持着8小时的学习时间，那一个月也算是我自认为学习效率最高的一段时间。反观在学校，自打进入谷粒商城，到写出这篇文章的时候已经过去了差不多两个月，尽管我已经很久没去上过课了，但此时的我仍然还在谷粒商城p256，才刚到项目的八分之五，我当初的设想是十月搞完谷粒商城，十一月开始边看八股边投实习，但结果并未达到预期。这前后的对比让我不得不感叹前一个月的高效，那是我出生以来第一次以自己的意愿行动而且达到了自认为效率的巅峰。</p><h2 id="“我觉得我是”"><a href="#“我觉得我是”" class="headerlink" title="“我觉得我是”"></a>“我觉得我是”</h2><p>但是您问我会打算继续下去吗？什么时候背八股？什么时候投实习？我不知道，我真不知道，我其实也在观望，工作或是考研？我其实是一直有着考研的想法的，从我上大学的一开始就有了，家里人也会更推荐我考研，当然于我而言考研意味着有机会摆脱我双非的身份，因此打从一开始我就没打算过要本科工作。但是随着技术栈的加深，我意识到我的技术有一天也达到企业要求，并且那一天应该不会太久，到那一天我真的能暂时放下熟悉已久的技术转而去沉淀数学英语吗？即使是到现在这个重要的节点上，我也仍然没有能做出一个明确的选择。</p><p>说起来，我一直都不是一个合格的做题家，从小到大我都是那种对学习投入和产出不成正比的学生，初中没考上市重点高中，高中前半准备混吃等死，后半有幸遇到贵人彻底点醒我，开始有效率地学习，构建知识体系、培养应试技巧，在那一段时期，我平生第一次能够独立完整地将每个学科看似孤立的知识点串联，以脑和A4纸为依托构出了一整个联系的整体，我终于体会到能够完全掌握一个知识点的一切——这种愉悦了，如果这个时候您问我是做题家吗，我会回答“我觉得我是”，至少我有一种我是做题家的感觉，而结果似乎也映证了这一点，那可能是我近几年唯一的高光（自认为）。不过上了大学以来，这一点一次又一次被打得粉碎，投入巨大的精力对知识进行解析串联，最后也只能拿到六七十分的卷面，而搞笑的是只做过几道题就匆忙上场的考试甚至能拿到比这高的分数😂。这一切让我对考试产生了抗拒，不稳定的发挥？每一次考试结果都像是在赌博，输赢与否似乎和我的努力无关？更大的可能是我本身做题能力就低下，高考不过一时赌运，我一直都不是一个做题家。总之，我变得害怕考试，害怕起考研，害怕考研的我会变成一个赌上全部却终无结果的赌徒。</p><p>如果考虑到大环境，再三年，行业会发展成什么样？会不会一蹶不振？到时候硕士甚至是2硕的含金量又会贬值到了什么程度了？别忘了25年正是硕士扩招以来毕业第一届！</p><h2 id="接下来？"><a href="#接下来？" class="headerlink" title="接下来？"></a>接下来？</h2><p>总还是考个研吧，研究生好歹是一辈子的名头，人家一眼就知道你是个能抗压的牛马不是？不过从我自身上讲，一方面我确实是太菜了，另一方面入门晚，隔壁重邮的大神，大一成开源社区第一贡献者的有，大二成为大厂安全负责人的也有，大三进入大厂的更是一大把，牛逼的人永远都有，他们的所得配得上他们的付出，我大一大二全混吃等死凭什么得到？都快十一月了，我还不是在犹豫，在焦虑？说实话，这不是一个找工作的人该有的状态，就这个样子出去不还是做些最没有技术含量的东西？现在出去不是赌？赌三年之后的行业不还是赌？研究生三年你不还有两年时间拿来实习？悲观什么呢，下个决心很难吗？</p><p>唉，考研了。</p><h2 id="所以“门长腿跑了”是什么意思？"><a href="#所以“门长腿跑了”是什么意思？" class="headerlink" title="所以“门长腿跑了”是什么意思？"></a>所以“门长腿跑了”是什么意思？</h2><p>对哦，貌似全文一大半都是在总结我的过去，反倒是题目说的java甚至没怎么露过脸😂</p><p>就是字面意思呗，东西太多了，学都学不完，学完的东西马上就有新技术能够取代，永远保持学习，应该是这一行该有的觉悟，就好比前几年学完spring啥的就能在hr面前大吹特吹，但现在普通人学了微服务也只能算是刚跨过竞争门槛的水平，红利消散殆尽，打工人的技术水平在提升，岗位却在减少，就算门想一直保证每一个打工人都能跨过自己，无奈现实便是如此，我们每一个卷狗，都在无形之中成为了门长腿奔跑的助力，吃亏的永远是打工人，谁在负重前行，谁又在岁月静好？</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以后应该是没空写这么杂的东西了，以后可能会把笔记啥的放上来，尽量更新吧，毕竟是记录心路历程的东西，就算是符号代码也能代表着什么，总得留下点吧。</p><p>拜拜，现在是北京时间2023年10月26日，明天写点消息队列的东西。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;算上今天，学java也学了三个月了，感觉还是没啥实感，怎么这么快呢？&lt;/p&gt;
&lt;h2 id=&quot;“我怎么会学java呢？”&quot;&gt;&lt;a href=&quot;#“我怎么会学java呢？”&quot; class=&quot;headerlink&quot; title=&quot;“我怎么会学java呢？”&quot;&gt;&lt;/a&gt;“我怎么会</summary>
      
    
    
    
    
    <category term="生活" scheme="https://github.com/KatzenyaSax/KatzenyaSax.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="Java" scheme="https://github.com/KatzenyaSax/KatzenyaSax.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>docker的安装及使用</title>
    <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/24/152039/"/>
    <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/24/152039/</id>
    <published>2023-10-24T07:20:39.000Z</published>
    <updated>2023-10-24T10:23:25.283Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目的数据库和中间件都会部署在linux系统上，所以使用docker这一工具。</p><h1 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h1><p>如果嫌麻烦，可以直接安装最新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>安装指定版本可以参考：<a href="https://zhuanlan.zhihu.com/p/143156163">如何在 Ubuntu 20.04 上安装和使用 Docker</a></p><h1 id="docker的运行及配置"><a href="#docker的运行及配置" class="headerlink" title="docker的运行及配置"></a>docker的运行及配置</h1><h2 id="运行docker"><a href="#运行docker" class="headerlink" title="运行docker"></a>运行docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="查看docker现有的镜像"><a href="#查看docker现有的镜像" class="headerlink" title="查看docker现有的镜像"></a>查看docker现有的镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="设置docker开机自启动"><a href="#设置docker开机自启动" class="headerlink" title="设置docker开机自启动"></a>设置docker开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="容器开机自启动"><a href="#容器开机自启动" class="headerlink" title="容器开机自启动"></a>容器开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update (<span class="variable">$docker</span> ps -a -q) --restart=always</span><br></pre></td></tr></table></figure><h2 id="配置下载地址"><a href="#配置下载地址" class="headerlink" title="配置下载地址"></a>配置下载地址</h2><p>docker的配置最主要就是配置下载地址，选用国内的阿里云镜像下载地址，依次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json&lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;htte6jcuw6y. mirror.aliyuncscom&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>参考文献：<a href="https://developer.aliyun.com/article/1245481?spm=a2c6h.14164896.0.0.1a9a47c5JPNQiV&scm=20140722.S_community@@%E6%96%87%E7%AB%A0@@1245481._.ID_1245481-RL_docker%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F-LOC_search~UND~community~UND~item-OR_ser-V_3-">使用阿里云 docker 镜像加速</a></p><h1 id="使用例：docker安装mysql"><a href="#使用例：docker安装mysql" class="headerlink" title="使用例：docker安装mysql"></a>使用例：docker安装mysql</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>也就是下载mysql的标准镜像文件到本地docker库中</p><h2 id="创建mysql实例并运行"><a href="#创建mysql实例并运行" class="headerlink" title="创建mysql实例并运行"></a>创建mysql实例并运行</h2><p>好比java中类的概念，镜像文件就是Bean；docker创建实例的行为就好比Bean的实例化，只有先实例化一个Bean的对象才能够使用其中的方法；而docker的容器就是jvm栈区，用于存放实例化的对象。<br>现在我们试创建一个mysql的实例化并运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name mysql-test -p 3306:3306 -v /mydata/mysql/log:/var/log/mysql -v /mydata/mysql/data:/var/data/mysql -v /mydata/mysql/conf.d:/etc/mysql.d -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure><p>注意这行命令的参数可以体现docker虚拟化的一些特征：<br>-p port1:port2，即将软件在docker的内部端口port2映射到主机（linux设备）的port1端口，意思是访问主机的port1端口，相当于访问docker内部的port2端口；-v &#x2F;file1:&#x2F;file2，即将软件在docker内部的文件映射到本机的存储上，意思是修改主机的file1中的文件，就相当于修改了docker内部file2中的文件，二者具有同等效力；而-e就是mysql常规的参数，配置mysql的密码等，-itd就是-i、-t、-d合在一起的，-d作用就是将该容器以守护线程的形式后台开启<br>所以为什么docker会给出这些参数呢？因为docker运行的软件是一个黑匣子嘛，里面的所有东西外面都是不好看到的，所以要预留一些特殊通道供外面看到（访问）喽。<br>不过总之是运行起来了</p><p>但是用户也可以手动进入docker内部，例如进入一下mysql的内部文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ID /bin/bash</span><br></pre></td></tr></table></figure><p>-it表示交互关系，ID表示mysql的容器id，运行后docker不是分配了一个id嘛，取前三个就可以了。这里就不多演示了。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>之后写入mysql的配置文件，就在映射的文件 &#x2F;mydata&#x2F;mysql里写一个my.cnf：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">secure_file_priv=/var/lib/mysql</span><br><span class="line">expire_logs_days=7</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DAERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line">max_connections=1000</span><br><span class="line">​</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">​</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>主要是为了配置utf编码</p><h2 id="完成安装"><a href="#完成安装" class="headerlink" title="完成安装"></a>完成安装</h2><p>最后重启容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart ID</span><br></pre></td></tr></table></figure><p>依然是取前三个就行了</p><p>这样就算安装完成了，外部机器访问本机（linux设备）的3306端口就可以访问到mysql了</p><h1 id="使用例：docker安装redis"><a href="#使用例：docker安装redis" class="headerlink" title="使用例：docker安装redis"></a>使用例：docker安装redis</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>拉取镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><h2 id="创建实例并运行"><a href="#创建实例并运行" class="headerlink" title="创建实例并运行"></a>创建实例并运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis-test -p 6379:6379 -v /mydata/redis/data:/data -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>redis默认指定的端口是6379<br>其中-d表示以&#x2F;etc&#x2F;redis&#x2F;redis.conf中的配置文件后台运行，而&#x2F;etc&#x2F;redis&#x2F;redis.conf不是映射到&#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf了吗？所以实际上在外部配置配置文件就可以了。<br>配置就不多说了，最主要的持久化功能新版redis已经默认支持了</p><h2 id="完成安装-1"><a href="#完成安装-1" class="headerlink" title="完成安装"></a>完成安装</h2><p>外部机器访问本机（linux设备）的6379端口就可以访问到redis了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于项目的数据库和中间件都会部署在linux系统上，所以使用docker这一工具。&lt;/p&gt;
&lt;h1 id=&quot;docker的安装&quot;&gt;&lt;a href=&quot;#docker的安装&quot; class=&quot;headerlink&quot; title=&quot;docker的安装&quot;&gt;&lt;/a&gt;docker的安装&lt;</summary>
      
    
    
    
    
    <category term="docker" scheme="https://github.com/KatzenyaSax/KatzenyaSax.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/24/101439/"/>
    <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/24/101439/</id>
    <published>2023-10-24T02:14:26.000Z</published>
    <updated>2023-10-24T09:15:10.321Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
