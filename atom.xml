<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KatzenyaSax: Hello!</title>
  
  
  <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/"/>
  <updated>2023-10-31T03:22:58.639Z</updated>
  <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/</id>
  
  <author>
    <name>KatzenyaSax</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java: 反射</title>
    <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/31/103433/"/>
    <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/31/103433/</id>
    <published>2023-10-31T02:34:33.000Z</published>
    <updated>2023-10-31T03:22:58.639Z</updated>
    
    <content type="html"><![CDATA[<p>注意，以下所有内容均为个人理解，且仅为简单阐述个人观点，如有错误欢迎指正！</p><h2 id="一句话解释反射？"><a href="#一句话解释反射？" class="headerlink" title="一句话解释反射？"></a>一句话解释反射？</h2><p>本质就是，主动获取一个类的各种信息的行为</p><p>不用管是如何获取到信息的，我们只用管是否确实获取了类的信息就行了</p><h2 id="谁在执行这个行为？"><a href="#谁在执行这个行为？" class="headerlink" title="谁在执行这个行为？"></a>谁在执行这个行为？</h2><p>jvm。</p><p>应该吧，因为我感觉idea能够动态检查类中是否有指定成员也是反射吧？因为idea运行期间jvm也在运行嘛，idea能够动态检查类中是否有成员，本质上应该也是通过jvm获取了类的成员数组，idea再从数组中检查是不是真有这个成员，以此来判断编写者是否出错。</p><h2 id="为什么是主动？"><a href="#为什么是主动？" class="headerlink" title="为什么是主动？"></a>为什么是主动？</h2><p>因为有需求，才会想着主动满足需求。</p><p>假如我自定义了一个类，但是这个类既没有被引用也没有被实例化，那么对于jvm来说这个类有用吗？肯定是没用意义的，因为jvm没用到这个类，jvm事实上对这个类没有需求，所以jvm不会想主动了解这个类。</p><p>但是如果我用这个类实例化了一个对象，并且用这个类调用了其中的成员方法，而此时jvm需要执行该方法，那么此时jvm对这个类有需求吗？显而易见地有需求，那么jvm才会想着主动获取这个类的一些信息。</p><h2 id="获取哪些信息？"><a href="#获取哪些信息？" class="headerlink" title="获取哪些信息？"></a>获取哪些信息？</h2><p>强大如他，可以获取的信息有如类的名字，类中成员的名字，成员的权限符，成员方法有哪些参数，甚至是这个类的父类、子类，父类子类的名字······似乎可以无限套娃下去，但获取的无外乎这几种：</p><p>1.类的名字</p><p>2.类的成员列表</p><p>3.成员的权限符</p><p>4.方法的形参列表</p><p>5.方法的父子类的相关信息</p><p>但是请记住一点：有用到的信息才会主动去获取，java的确实反射很强大，但再强大也是建立在具体的需求上的，没有需求的信息便不需要获取，这是基于实用主义的原则，也是基于减少冗余提升性能的考量，jvm性能本来就堪忧你再把cpu放在无关程序的内容上我不敢想了。</p><h2 id="常见的方法"><a href="#常见的方法" class="headerlink" title="常见的方法"></a>常见的方法</h2><p>貌似八股有点喜欢爱问api😂我就不列了，几个常用的方法记住就得了，以后再补嘛。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;注意，以下所有内容均为个人理解，且仅为简单阐述个人观点，如有错误欢迎指正！&lt;/p&gt;
&lt;h2 id=&quot;一句话解释反射？&quot;&gt;&lt;a href=&quot;#一句话解释反射？&quot; class=&quot;headerlink&quot; title=&quot;一句话解释反射？&quot;&gt;&lt;/a&gt;一句话解释反射？&lt;/h2&gt;&lt;p&gt;本</summary>
      
    
    
    
    
    <category term="Java" scheme="https://github.com/KatzenyaSax/KatzenyaSax.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ的基础配置及使用</title>
    <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/27/213007/"/>
    <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/27/213007/</id>
    <published>2023-10-27T13:30:07.000Z</published>
    <updated>2023-10-31T03:05:48.994Z</updated>
    
    <content type="html"><![CDATA[<p>注意，以下所有内容均为个人理解，且建立在具体的场景上，可能不适应所有情况</p><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p>可以在允许最终一致性的场景下，将高并发请求简单化，也就是将高并发的请求处理成一条有序的消息队列，每一个请求都可以看作是一条消息，服务接口会绑定这条队列，按照消息进队列顺序依次处理消息</p><p>用在订单服务这种用户不需要立刻拿到反馈的场景简直绝配。</p><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>1.生产者（Publisher）生产消息，通过一条长连接将消息送到消息代理（Broker）</p><p>2.消息由消息头和消息体组成，其中消息体中包含了一个路由（route-key），决定着该消息会进入哪一个队列</p><p>3.消息代理先接收消息，再将将消息送到交换机</p><p>4.交换机通过消息的消息头包含的key-route，将消息送入对应的队列</p><p>5.消费者（Consumer）通过一条长连接与消息代理连接</p><p>6.消费者中的不同服务通过不同的信道，监听并接收不同队列的消息</p><h2 id="几种交换机"><a href="#几种交换机" class="headerlink" title="几种交换机"></a>几种交换机</h2><p>1.director：点对点模式，使用route-key绑定队列，并且route-key精确匹配</p><p>2.headers：点对点模式，属于JMS的一种，已淘汰</p><p>3.fanout：广播模式，交换机中所有队列都会收到</p><p>4.topic：发布订阅模式，同样是通过route-key匹配，但是允许使用通配符部分匹配，匹配到的队列即是订阅了生产者的队列</p><p>director和fanout没什么好说的，topic需要注意，该种交换机绑定队列时同样需要声明route-key，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#.aaa       （队列1）</span><br><span class="line">bbb.#       （队列2）</span><br><span class="line">#.ccc.bbb   （队列3）</span><br></pre></td></tr></table></figure><p>其中通配符#表示该处可以是任意个任何字符，但是必须要有字符。除此之外路由键还完全需要满足对应的形式。</p><h2 id="使用docker安装RabbitMQ"><a href="#使用docker安装RabbitMQ" class="headerlink" title="使用docker安装RabbitMQ"></a>使用docker安装RabbitMQ</h2><p>直接启动rabbitmq:management</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management</span><br></pre></td></tr></table></figure><p>没有镜像不用慌，docker会自动联网下载镜像，请确保网络通畅。</p><p>启动时，必须按照相同的端口映射，启动后访问本机（linux设备）的15672端口即可抵达rabbitmq的控制台。</p><h1 id="SpringBoot整合RabbitMQ"><a href="#SpringBoot整合RabbitMQ" class="headerlink" title="SpringBoot整合RabbitMQ"></a>SpringBoot整合RabbitMQ</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>在要使用RabbitMQ的服务中直接引入其启动依赖<br>    <!-- rabbitMQ整合依赖 --><br>    <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-amqp --></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置RabbitMQ"><a href="#配置RabbitMQ" class="headerlink" title="配置RabbitMQ"></a>配置RabbitMQ</h2><p>在服务的application中添加上：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.74</span><span class="number">.130</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">        <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>分别表示配置RabbitMQ所在的ip、端口，和使用的虚拟主机（默认应为&#x2F;）</p><h2 id="启动类上开启RabbitMQ功能"><a href="#启动类上开启RabbitMQ功能" class="headerlink" title="启动类上开启RabbitMQ功能"></a>启动类上开启RabbitMQ功能</h2><p>也即是加上注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableRabbit</span></span><br></pre></td></tr></table></figure><p>至此配置完毕</p><h1 id="在SpringBoot中使用RabbitMQ"><a href="#在SpringBoot中使用RabbitMQ" class="headerlink" title="在SpringBoot中使用RabbitMQ"></a>在SpringBoot中使用RabbitMQ</h1><h2 id="声明各种MQ组件"><a href="#声明各种MQ组件" class="headerlink" title="声明各种MQ组件"></a>声明各种MQ组件</h2><p>在SpringBoot中，可以使用AmpqAdmin类来进行MQ组件的创建，一般使用其自带的declare系列方法进行创建。</p><h3 id="声明一个交换机"><a href="#声明一个交换机" class="headerlink" title="声明一个交换机"></a>声明一个交换机</h3><p>测试方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">rabbitTest01</span><span class="params">()</span>&#123;</span><br><span class="line">    DirectExchange directExchange=<span class="keyword">new</span> <span class="title class_">DirectExchange</span>(</span><br><span class="line">            <span class="string">&quot;spring.test01.directExchange&quot;</span>      <span class="comment">//名称</span></span><br><span class="line">            ,<span class="literal">true</span>                       <span class="comment">//是否持久化</span></span><br><span class="line">            ,<span class="literal">false</span>          <span class="comment">//是否自动删除</span></span><br><span class="line">    );</span><br><span class="line">    amqpAdmin.declareExchange(directExchange);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先创建一个交换机，名称为spring.test01.directExchange，设定为持久化、不自动删除。amqpAdmin的declareExchange方法，用于“宣称”也即是创建一个交换机。</p><h3 id="声明一个队列"><a href="#声明一个队列" class="headerlink" title="声明一个队列"></a>声明一个队列</h3><p>测试方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    Queue queue=<span class="keyword">new</span> <span class="title class_">Queue</span>(</span><br><span class="line">            <span class="string">&quot;spring.test01.queue01&quot;</span></span><br><span class="line">            ,<span class="literal">true</span>                       <span class="comment">//持久化</span></span><br><span class="line">            ,<span class="literal">false</span>              <span class="comment">//排他性</span></span><br><span class="line">            ,<span class="literal">false</span>          <span class="comment">//自动删除</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//声明一个队列</span></span><br><span class="line">    amqpAdmin.declareQueue(queue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Queue的对象构造方法参数有四个：名字、是否持久化、是否排他、是否自动删除</p><h3 id="声明一个绑定关系"><a href="#声明一个绑定关系" class="headerlink" title="声明一个绑定关系"></a>声明一个绑定关系</h3><p>测试方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createBinding</span><span class="params">()</span>&#123;</span><br><span class="line">    Binding binding=<span class="keyword">new</span> <span class="title class_">Binding</span>(</span><br><span class="line">            <span class="string">&quot;spring.test01.queue01&quot;</span>             <span class="comment">//目的地</span></span><br><span class="line">            , Binding.DestinationType.QUEUE     <span class="comment">//目的地的类型</span></span><br><span class="line">            ,<span class="string">&quot;spring.test01.directExchange&quot;</span>     <span class="comment">//交换机名称</span></span><br><span class="line">            ,<span class="string">&quot;testRK&quot;</span>                           <span class="comment">//路由键</span></span><br><span class="line">            ,<span class="literal">null</span>                               <span class="comment">//自定义参数，这里先不讨论</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//声明一个绑定关系</span></span><br><span class="line">    amqpAdmin.declareBinding(binding);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先明确，在RabbitMQ中，绑定一定有交换机参与的，可以是交换机之间绑定，也可以是交换机与队列的绑定，但是不允许发生队列与队列之间的绑定，也可以理解，毕竟任何消息要从交换机发送出去，队列本身是消息接收者，在没有交换机的前提下自身是不可能产生消息的，队列间的绑定因此是没有意义的</p><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><h3 id="简单的消息发送"><a href="#简单的消息发送" class="headerlink" title="简单的消息发送"></a>简单的消息发送</h3><p>使用RabbitTemplate的方法，我们可以使用创建并发送消息的convertAndSend方法。</p><p>测试方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">rabbitMessageSending</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建并发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            <span class="string">&quot;spring.test01.directExchange&quot;</span></span><br><span class="line">            ,<span class="string">&quot;testRK&quot;</span></span><br><span class="line">            ,<span class="string">&quot;ttttest&quot;</span>);</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>参数先后是：交换机、路由键、消息</p><h3 id="序列化输出Obejct对象"><a href="#序列化输出Obejct对象" class="headerlink" title="序列化输出Obejct对象"></a>序列化输出Obejct对象</h3><p>上面的例子看出，rabbit发送消息可以发送String类型的数据，但是也仅限于String这种较为通用和特殊的数据类型了。一般的Object对象，rabbit是无法发送的，我们必须使该类实现一个Serializeable接口，告诉rabbit可以序列化输出对象，就用java自带的序列化方法就行</p><p>例如我有一个Entity类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Entity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String VerbI;</span><br><span class="line">    <span class="keyword">private</span> String VerbII;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们便可以将该类的对象输出为序列化形式，测试方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">rabbitMessageSending</span><span class="params">()</span>&#123;</span><br><span class="line">    Entity message=<span class="keyword">new</span> <span class="title class_">Entity</span>();</span><br><span class="line">    message.setVerbI(<span class="string">&quot;I&quot;</span>);</span><br><span class="line">    message.setVerbII(<span class="string">&quot;II&quot;</span>)</span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            <span class="string">&quot;spring.test01.directExchange&quot;</span></span><br><span class="line">            ,<span class="string">&quot;testRK&quot;</span></span><br><span class="line">            ,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送成功后，可以在客户端得知队列收到了一条消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rO0ABXNyAC1jb20ua2F0emVueWFzYXgubWFsbC5vcmRlci5lbnRpdHkuT3JkZXJFbnRpdHkAAAAAAAAAAQIAKkwADmF1dG9Db25maXJtRGF5dAATTGphdmEv</span><br><span class="line">bGFuZy9JbnRlZ2VyO0wAC2JpbGxDb250ZW50dAASTGphdmEvbGFuZy9TdHJpbmc7TAAKYmlsbEhlYWRlcnEAfgACTAARYmlsbFJlY2VpdmVyRW1haWxxAH4A</span><br><span class="line">AkwAEWJpbGxSZWNlaXZlclBob25lcQB+AAJMAAhiaWxsVHlwZXEAfgABTAALY29tbWVudFRpbWV0ABBMamF2YS91dGlsL0RhdGU7TAANY29uZmlybVN0YXR1</span><br><span class="line">c3EAfgABTAAMY291cG9uQW1vdW50dAAWTGphdmEvbWF0aC9CaWdEZWNpbWFsO0wACGNvdXBvbklkdAAQTGphdmEvbGFuZy9Mb25nO0wACmNyZWF0ZVRpbWVx</span><br><span class="line">AH4AA0wADGRlbGV0ZVN0YXR1c3EAfgABTAAPZGVsaXZlcnlDb21wYW55cQB+AAJMAApkZWxpdmVyeVNucQB+AAJMAAxkZWxpdmVyeVRpbWVxAH4AA0wADmRp</span><br><span class="line">c2NvdW50QW1vdW50cQB+AARMAA1mcmVpZ2h0QW1vdW50cQB+AARMAAZncm93dGhxAH4AAUwAAmlkcQB+AAVMAAtpbnRlZ3JhdGlvbnEAfgABTAARaW50ZWdy</span><br><span class="line">YXRpb25BbW91bnRxAH4ABEwACG1lbWJlcklkcQB+AAVMAA5tZW1iZXJVc2VybmFtZXEAfgACTAAKbW9kaWZ5VGltZXEAfgADTAAEbm90ZXEAfgACTAAHb3Jk</span><br><span class="line">ZXJTbnEAfgACTAAJcGF5QW1vdW50cQB+AARMAAdwYXlUeXBlcQB+AAFMAAtwYXltZW50VGltZXEAfgADTAAPcHJvbW90aW9uQW1vdW50cQB+AARMAAtyZWNl</span><br><span class="line">aXZlVGltZXEAfgADTAAMcmVjZWl2ZXJDaXR5cQB+AAJMABVyZWNlaXZlckRldGFpbEFkZHJlc3NxAH4AAkwADHJlY2VpdmVyTmFtZXEAfgACTAANcmVjZWl2</span><br><span class="line">ZXJQaG9uZXEAfgACTAAQcmVjZWl2ZXJQb3N0Q29kZXEAfgACTAAQcmVjZWl2ZXJQcm92aW5jZXEAfgACTAAOcmVjZWl2ZXJSZWdpb25xAH4AAkwACnNvdXJj</span><br><span class="line">ZVR5cGVxAH4AAUwABnN0YXR1c3EAfgABTAALdG90YWxBbW91bnRxAH4ABEwADnVzZUludGVncmF0aW9ucQB+AAF4cHBwcHBwcHBwcHBwcHBwcHBwcHBwcHNy</span><br><span class="line">AA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAXQABGhkb3dwcHBwcHBw</span><br><span class="line">cHBwcHBwcHBwcHBw</span><br></pre></td></tr></table></figure><p>总之是可以输出任意Object类了，且用的是java自带的序列化方法</p><h3 id="序列化Obejct为JSON格式"><a href="#序列化Obejct为JSON格式" class="headerlink" title="序列化Obejct为JSON格式"></a>序列化Obejct为JSON格式</h3><p>上面也看到了，用java自带的序列化方法很不友好，能不能序列化成JSON格式呢？</p><p>还真能，我们可以自定义。写一个配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitSerializeConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么意思呢？相当于重写了rabbit默认的消息转换器，因为实例化一个rabbitTemplate单例时，其会调用一个构造方法，恰好就名叫MessageConverter，它的返回值就是一个默认的序列化方式。</p><p>而默认的消息转换器的逻辑是，如果是String类型消息就直接输出原本的消息；如果不是就参照java默认的序列化机制。</p><p>而我们在配置类中加入了同名的组件MessgaeConverter，系统配置时会直接调用且优先调用这个同名方法，这一举动会使该方法传递给rabbitTemplate的默认序列化方式被顶替为JSON序列化方式，也即是new的一个Jackson2JsonMessageConverter()。</p><p>总之我们再次测试时，消息会变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;VerbI&quot;:&quot;I&quot;,&quot;VerbII&quot;:&quot;II&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h2><h3 id="简单的消息接收"><a href="#简单的消息接收" class="headerlink" title="简单的消息接收"></a>简单的消息接收</h3><p>需要使用@RabbitListener注解，测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听消息队列，获取消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;spring.test01.queue01&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenMessage</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;监听到消息：&quot;</span>+message.toString()+<span class="string">&quot;，类型为：&quot;</span>+message.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一下，该注解只有在容器内才能生效，也就是在各种组件里面@Service、@Controller、@Component等才行。</p><p>开启服务，运行一下上面发送Object类的测试方法，看看打印结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">监听到消息：(Body:&#x27;[B@1f06c07c(byte[820])&#x27; MessageProperties [headers=&#123;__TypeId__=Entity&#125;, contentType=application/json, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=spring.test01.directExchange, receivedRoutingKey=testRK, deliveryTag=1, consumerTag=amq.ctag-zOPjexiGSPI21zDUGAr-mA, consumerQueue=spring.test01.queue01])，类型为：class org.springframework.amqp.core.Message</span><br></pre></td></tr></table></figure><h3 id="接收特定类型消息"><a href="#接收特定类型消息" class="headerlink" title="接收特定类型消息"></a>接收特定类型消息</h3><p>接收消息时也可以直接把对象类型放上去，测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenMessage</span><span class="params">(Message message,Entity body)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;监听到消息：&quot;</span>+body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">监听到消息：Entity(VerbI=&quot;I&quot;,VerbII=&quot;II&quot;)</span><br></pre></td></tr></table></figure><h3 id="甚至可以拿到信道"><a href="#甚至可以拿到信道" class="headerlink" title="甚至可以拿到信道"></a>甚至可以拿到信道</h3><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenMessage</span><span class="params">(Message message, Entity body, Channel channel)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>具体有什么用我就不清楚了</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>@RabbitListener只能支持同一个消息被仅仅一个服务监听到，但是当队列中碰到很多条消息时，消息可以被负载均衡到不同的服务。</p><p>更极端的情况，例如消息队列里消息太多，比服务器数量还多怎么办呢？那就只有在一台服务器处理完一个消息时，才能接收下一个消息，未被接收的消息就会阻塞在消息代理中等待被处理</p><h3 id="RabbitHandler"><a href="#RabbitHandler" class="headerlink" title="@RabbitHandler"></a>@RabbitHandler</h3><p>还有一个注解是@RabbitHandler，它可以和@RabbitListener注解搭配使用，就可以区分队列消息的类型<br>将@RabbitListener放在类上，@RabbitHandler放在方法上，例如拿一个业务层接口Service开刀：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;spring.test01.queue01&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 监听Entity对象消息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="comment">//@RabbitListener(queues = &#123;&quot;spring.test01.queue01&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenEntityMessage</span><span class="params">(Message message, Entity body, Channel channe&#123;</span></span><br><span class="line"><span class="params">        System.out.println(<span class="string">&quot;接收到Entity对象消息：&quot;</span>+body)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 接收String对象消息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenStringMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接受到String对象消息：&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次分别调用上面的两个发送消息的测试方法，查看结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">接受到String对象消息：ttttest</span><br><span class="line">接收到Entity对象消息：Entity(VerbI=&quot;I&quot;,VerbII=&quot;II&quot;)</span><br></pre></td></tr></table></figure><p>也就是说通过配合使用@RabbitListener和@RabbitHandler，可以做到相当于方法的重载，根据参数类型的不同而采取不同的处理方式</p><h1 id="可靠投递"><a href="#可靠投递" class="headerlink" title="可靠投递"></a>可靠投递</h1><p>防止消息在发送、接收过程中因为一系列原因导致的的消息丢失。</p><p>一种解决方法是使用事务，但是据rabbitMQ官方说法，这可能会使性能下降250倍，因此不推荐使用。</p><p>而另一种解决方案是使用确认机制，具体工作流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Publisher发送消息到Broker，若Broker收到了消息则调用一个方法confirmCallback进行确认</span><br><span class="line"></span><br><span class="line">2.Broker通过Exchange将消息发往Queue，若Queue未收到消息，则调用一个方法returnCallback表示未收到消息</span><br><span class="line"></span><br><span class="line">3.Consumer开始接收Queue的消息时，采用的是ack机制，若Consumer正确地消费到了消息则将消息从Queue中删除，否则退回到Queue或重新投递等</span><br></pre></td></tr></table></figure><h2 id="生产者到消息代理确认"><a href="#生产者到消息代理确认" class="headerlink" title="生产者到消息代理确认"></a>生产者到消息代理确认</h2><h3 id="配置application"><a href="#配置application" class="headerlink" title="配置application"></a>配置application</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br></pre></td></tr></table></figure><h3 id="自定义COnfirmCallback"><a href="#自定义COnfirmCallback" class="headerlink" title="自定义COnfirmCallback"></a>自定义COnfirmCallback</h3><p>需要写一个配置类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfirmConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRabbitTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(</span><br><span class="line">                (correlationData, b, s) -&gt; System.out.println(<span class="string">&quot;CorrelationData: &quot;</span>+correlationDa+<span class="string">&quot; , ack: &quot;</span>+b+<span class="string">&quot; reason: &quot;</span>+s)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先明确，让Spring自动配置的一个单例rabbitTemplate，在整个服务器运行的期间都是同一个，因此只要我们找到它并且将其部分配置修改，就能让其在整个服务器期间都遵从我们的配置。</p><p>因此，我们将rabbitTemplate的ConfirmCallback修改为我们所需要的处理方法，也即是重写。</p><p>注意这里有坑，这个配置组件不应该和上面的RabbitSerializeConfiguration写在一起，会循环依赖，具体原因就是RabbitTemplate依赖于RabbitSerializeConfiguration中自定义序列化转换器，而该配置类有引入了RabbitTemplate的单例实例化对象，二者会造成了循环依赖</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>还是用发送消息的测试方法发送一个消息，反馈消息会反馈到消息发送者，也就是临时客户端，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CorrelationData: null , ack: true reason: null</span><br></pre></td></tr></table></figure><p>注意这里的ack参数，只要消息从Publisher传到Broker，都是true，他不会参考后续进展。事实上，ack的作用就是用来表示消息是否被删除，在这里就可以看作是，Publisher将消息复制了一份交给Broker，Broker收到后就给一个反馈ConfirmCallback告诉Publisher有没有收到消息，如果收到了，ack就为true，消息就会从Publisher删除；没有收到ack就为false，该消息可能会重发，也可能会直接丢弃，依照具体配置执行。</p><p>注意，上述过程可以看作是整个rabbitMQ中，两点间消息传递确认机制的模板，基本上大差不差，区别可能仅在于任何处理发送失败的消息。</p><h2 id="消息代理到队列确认"><a href="#消息代理到队列确认" class="headerlink" title="消息代理到队列确认"></a>消息代理到队列确认</h2><h3 id="配置application-1"><a href="#配置application-1" class="headerlink" title="配置application"></a>配置application</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">     <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">template:</span></span><br><span class="line">            <span class="attr">mandatory:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>publisher-returns表示开启消息代理到队列的确认，而template.mandatory表示以异步（新开一个线程执行）方式回调return。</p><h3 id="写配置类"><a href="#写配置类" class="headerlink" title="写配置类"></a>写配置类</h3><p>在上面的配置类中setConfirmCallback后面加上setReturnCallback</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2.broker到queue的确认</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">rabbitTemplate.setReturnsCallback(returnedMessage -&gt;</span><br><span class="line">    System.out.println(</span><br><span class="line">        <span class="string">&quot;发送失败的消息内容: &quot;</span>+returnedMessage.getMessage()</span><br><span class="line">        +<span class="string">&quot; 回复的状态码: &quot;</span>+ returnedMessage.getReplyCode()</span><br><span class="line">        +<span class="string">&quot; 回复的文本内容: &quot;</span>+ returnedMessage.getReplyText()</span><br><span class="line">        +<span class="string">&quot; 发送该消息的交换机: &quot;</span>+returnedMessage.getExchange()</span><br><span class="line">        +<span class="string">&quot; 路由键: &quot;</span>+returnedMessage.getRoutingKey()</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>为了人为造成发送失败，将测试方法的路由键暂时修改，随后测试.同样是在发送消息的客户端中，但是没有在临时客户端的test结果中特别展示，要在完整终端查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发送失败的消息内容: (Body:&#x27;&quot;ttttest&quot;&#x27; MessageProperties [headers=&#123;__TypeId__=java.lang.String&#125;, contentType=application/json, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, deliveryTag=0]) 回复的状态码: 312 回复的文本内容: NO_ROUTE 发送该消息的交换机: spring.test01.directExchange 路由键: ttttestRK</span><br></pre></td></tr></table></figure><p>确实是有错误提示，而且会给出错误的原因：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">回复的状态码: 312 </span><br><span class="line">回复的文本内容: NO_ROUTE</span><br><span class="line">发送该消息的交换机: spring.test01.directExchange </span><br><span class="line">路由键: ttttestRK</span><br></pre></td></tr></table></figure><p>原因就是NO_ROUTE，即是找不到路由键</p><h2 id="队列到消费者确认"><a href="#队列到消费者确认" class="headerlink" title="队列到消费者确认"></a>队列到消费者确认</h2><p>RabbitMQ自带一个自动ack的机制，一旦接收到数据就会回复ack给队列，队列接到反馈后就会删除消息<br>但是一个很严重的缺陷是，该机制允许服务器一接收到消息就回复ack，也就是我只管接收到，我一接收到，队列就删除该消息。</p><p>但是从逻辑上讲，服务器接收到消息后还应该进行处理，若是在这段处理的时间内服务器宕机，那么此时服务器丢失了消息，而队列那边早就把消息删了，这就导致消息的丢失。</p><p>更严重的是，服务器一宕机，队列那边剩余阻塞的消息也会全部清空。</p><p>唯一的解决方案是手动确认</p><h3 id="配置application-2"><a href="#配置application-2" class="headerlink" title="配置application"></a>配置application</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">istener:</span></span><br><span class="line">            <span class="attr">simple:</span></span><br><span class="line">                <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><p>此时，除非我们手动确认消息，否则消息在队列中是不会删除的，且会一直处于ready状态</p><h3 id="手动确认"><a href="#手动确认" class="headerlink" title="手动确认"></a>手动确认</h3><p>在接收消息的方法后面手动确认ack，加上channel.basicAck()方法，前提是参数表中获取了channel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听Entity对象消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 加上了手动确认ack</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitHandler</span></span><br><span class="line"><span class="comment">//@RabbitListener(queues = &#123;&quot;spring.test01.queue01&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenEntityMessage</span><span class="params">(Message message, Entity body, Channel channel)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到Entity对象消息：&quot;</span>+body);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        channel.basicAck(</span><br><span class="line">                message.getMessageProperties().getDeliveryTag()     <span class="comment">//消息的tag</span></span><br><span class="line">                , <span class="literal">false</span>                                         <span class="comment">//是否批量确认</span></span><br><span class="line">        );</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(message.getMessageProperties().getDeliveryTag()+<span class="string">&quot;号消息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中第一个参数是消息的tag，根据消息进入channel的顺序，从1开始的自增id。</p><p>第二个参数表示是否连带确认后面进入该channel的所有消息，建议false</p><p>而同样，basicNack()方法就是不确认ack，但是相比basicAck会多出一个参数requeue，表示是否将消息退回队列重新ready，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">channel.basicNack(</span><br><span class="line">    message.getMessageProperties().getDeliveryTag()     <span class="comment">//消息的tag</span></span><br><span class="line">    , <span class="literal">false</span>                                         <span class="comment">//是否批量确认</span></span><br><span class="line">    , <span class="literal">true</span>                                          <span class="comment">//退回队列，或是删除消息</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;注意，以下所有内容均为个人理解，且建立在具体的场景上，可能不适应所有情况&lt;/p&gt;
&lt;h1 id=&quot;RabbitMQ&quot;&gt;&lt;a href=&quot;#RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ&quot;&gt;&lt;/a&gt;RabbitMQ&lt;/h1&gt;&lt;p&gt;可以</summary>
      
    
    
    
    
    <category term="中间件" scheme="https://github.com/KatzenyaSax/KatzenyaSax.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>java三个月：从入门到门长腿跑了</title>
    <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/25/110959/"/>
    <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/25/110959/</id>
    <published>2023-10-25T03:09:59.000Z</published>
    <updated>2023-10-28T01:19:45.432Z</updated>
    
    <content type="html"><![CDATA[<p>算上今天，学java也学了三个月了，感觉还是没啥实感，怎么这么快呢？</p><h2 id="“我怎么会学java呢？”"><a href="#“我怎么会学java呢？”" class="headerlink" title="“我怎么会学java呢？”"></a>“我怎么会学java呢？”</h2><p>实话实说，在正式学java之前，java给我的印象一直是跟风狗、卷、带专哥最爱，当然我学了之后这个刻板印象狠狠地又加深了😂，反正我也是跟风学的java，我就是跟风狗呗？跟风的起因是6月7月份的时候，看见群里水友老是“搓mall搓mall”啥的，我寻思mall是什么玩意，就去搜了，想着自己能不能搞一个出来，然后那天是7月24号，一个无风的傍晚，我对着网上随便招的一个教程干瞪眼，一直持续到晚上吃完饭，我终于理解了，这是一个坑，还是天坑。</p><p>不过好在我立刻就意识到这个项目的语言：java，这个东西以前就整过我，所以我一直对其抱有一种微妙的情绪。我依稀记得小时候为了玩mc，装环境装了一个下午，您能理解一个小学生对着一大堆英文无数次试错吗？总之在此之后java就成了一个背景板的玩意，只要有人问起我就知道，哦java就是写mc的，更多一点我会告诉人这似乎是一款编程的东西，再多一点我就不知道了，反正上大学了，mc也玩的少了，java对我来说也变成了一个可有可无的东西，并且我还非常乐意去看别人有关java已死的言论，一方面java版mc的优化确实烂，另一方面是我本身没能上到计算机专业，于是对计算机有着一种近乎仇视的态度，“电子不比你计算机差！”“硬件不是软件的爹？”我就抱着这种虚假的骄傲对一切与计算机相关的领域一视同仁，java也不例外，“我怎么会学java呢？”成为了我对java最外显的态度。虽然我展现出一幅“不屑学软件”的态度，但我知道这本质上只是吃不到葡萄说葡萄酸罢了。</p><p>在明知这是一个大坑的情况下，我毅然迈步，一方面是出于对未来道路的选择焦虑，另一方面是我确实太菜了，我两年在学过的含金量最高的面向企业的技能居然是电焊。所以几乎是命运一般，我兜兜转转地又回到了java，于是在一个炎热的上午，我顺利搞定了开发环境，正式开启了java的学习，那一天是7月25日。</p><h2 id="“我们称之为高效”"><a href="#“我们称之为高效”" class="headerlink" title="“我们称之为高效”"></a>“我们称之为高效”</h2><p>我先学的javase，我只能庆幸有一点点的c++基础，说到c++，其实我一开始是准备嗯造c++的，但是最后也没有坚持下列，但是java和c++基础的语法都是大差不差的，所以直接开始了各种javase常见api的使用。</p><p>学习的过程倒是没什么好说的，学完javase，看了一下javaweb，粗略了解了一下springboot、mybatis等，也了解了一些有关分布式的知识，javaweb教程上教的是单体项目，典中典之员工管理系统，我想都没想就跳过了，我现在急需的是了解一些含金量更高的知识。在这个时期我逐渐了解到，我要学的mall，并非是一个特定的项目，而是一类项目的通称，我也不知道在哪知道了谷粒商城这个项目不错，也经过了大佬的一些指点，我就将短期目标放在了谷粒商城上，狠狠地补足谷粒商城前置的一些基础条件，可以说在正式进入谷粒商城前，我的学习还是相当平坦的，除了在已经能够使用springboot的前提下花了一整个星期补了一下ssm，最后只留下一脸懵逼的我一脸懵逼，这些东西可能作用很大，但对彼时的我而言算是不太大的帮助，至少没有多少性价比。</p><p>在进入谷粒商城后，时间差不多就来到了正式开学一个星期，虽然也在稳步进展，却始终没有7月25日到开学前效率那么高了，受限于学校事务等，我始终无法像窝在在家一样全身心得投入，在家里，我可以早上9点起床学到12点，下午2点学到6点，晚上再从11点学的1点，每天基本上保持着8小时的学习时间，那一个月也算是我自认为学习效率最高的一段时间。反观在学校，自打进入谷粒商城，到写出这篇文章的时候已经过去了差不多两个月，尽管我已经很久没去上过课了，但此时的我仍然还在谷粒商城p256，才刚到项目的八分之五，我当初的设想是十月搞完谷粒商城，十一月开始边看八股边投实习，但结果并未达到预期。这前后的对比让我不得不感叹前一个月的高效，那是我出生以来第一次以自己的意愿行动而且达到了自认为效率的巅峰。</p><h2 id="“我觉得我是”"><a href="#“我觉得我是”" class="headerlink" title="“我觉得我是”"></a>“我觉得我是”</h2><p>但是您问我会打算继续下去吗？什么时候背八股？什么时候投实习？我不知道，我真不知道，我其实也在观望，工作或是考研？我其实是一直有着考研的想法的，从我上大学的一开始就有了，家里人也会更推荐我考研，当然于我而言考研意味着有机会摆脱我双非的身份，因此打从一开始我就没打算过要本科工作。但是随着技术栈的加深，我意识到我的技术有一天也达到企业要求，并且那一天应该不会太久，到那一天我真的能暂时放下熟悉已久的技术转而去沉淀数学英语吗？即使是到现在这个重要的节点上，我也仍然没有能做出一个明确的选择。</p><p>说起来，我一直都不是一个合格的做题家，从小到大我都是那种对学习投入和产出不成正比的学生，初中没考上市重点高中，高中前半准备混吃等死，后半有幸遇到贵人彻底点醒我，开始有效率地学习，构建知识体系、培养应试技巧，在那一段时期，我平生第一次能够独立完整地将每个学科看似孤立的知识点串联，以脑和A4纸为依托构出了一整个联系的整体，我终于体会到能够完全掌握一个知识点的一切——这种愉悦了，如果这个时候您问我是做题家吗，我会回答“我觉得我是”，至少我有一种我是做题家的感觉，而结果似乎也映证了这一点，那可能是我近几年唯一的高光（自认为）。不过上了大学以来，这一点一次又一次被打得粉碎，投入巨大的精力对知识进行解析串联，最后也只能拿到六七十分的卷面，而搞笑的是只做过几道题就匆忙上场的考试甚至能拿到比这高的分数😂。这一切让我对考试产生了抗拒，不稳定的发挥？每一次考试结果都像是在赌博，输赢与否似乎和我的努力无关？更大的可能是我本身做题能力就低下，高考不过一时赌运，我一直都不是一个做题家。总之，我变得害怕考试，害怕起考研，害怕考研的我会变成一个赌上全部却终无结果的赌徒。</p><p>如果考虑到大环境，再三年，行业会发展成什么样？会不会一蹶不振？到时候硕士甚至是2硕的含金量又会贬值到了什么程度了？别忘了25年正是硕士扩招以来毕业第一届！</p><h2 id="接下来？"><a href="#接下来？" class="headerlink" title="接下来？"></a>接下来？</h2><p>总还是考个研吧，研究生好歹是一辈子的名头，人家一眼就知道你是个能抗压的牛马不是？不过从我自身上讲，一方面我确实是太菜了，另一方面入门晚，隔壁重邮的大神，大一成开源社区第一贡献者的有，大二成为大厂安全负责人的也有，大三进入大厂的更是一大把，牛逼的人永远都有，他们的所得配得上他们的付出，我大一大二全混吃等死凭什么得到？都快十一月了，我还不是在犹豫，在焦虑？说实话，这不是一个找工作的人该有的状态，就这个样子出去不还是做些最没有技术含量的东西？现在出去不是赌？赌三年之后的行业不还是赌？研究生三年你不还有两年时间拿来实习？悲观什么呢，下个决心很难吗？</p><p>唉，考研了。</p><h2 id="所以“门长腿跑了”是什么意思？"><a href="#所以“门长腿跑了”是什么意思？" class="headerlink" title="所以“门长腿跑了”是什么意思？"></a>所以“门长腿跑了”是什么意思？</h2><p>对哦，貌似全文一大半都是在总结我的过去，反倒是题目说的java甚至没怎么露过脸😂</p><p>就是字面意思呗，东西太多了，学都学不完，学完的东西马上就有新技术能够取代，永远保持学习，应该是这一行该有的觉悟，就好比前几年学完spring啥的就能在hr面前大吹特吹，但现在普通人学了微服务也只能算是刚跨过竞争门槛的水平，红利消散殆尽，打工人的技术水平在提升，岗位却在减少，就算门想一直保证每一个打工人都能跨过自己，无奈现实便是如此，我们每一个卷狗，都在无形之中成为了门长腿奔跑的助力，吃亏的永远是打工人，谁在负重前行，谁又在岁月静好？</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以后应该是没空写这么杂的东西了，以后可能会把笔记啥的放上来，尽量更新吧，毕竟是记录心路历程的东西，就算是符号代码也能代表着什么，总得留下点吧。</p><p>拜拜，现在是北京时间2023年10月26日，明天写点消息队列的东西。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;算上今天，学java也学了三个月了，感觉还是没啥实感，怎么这么快呢？&lt;/p&gt;
&lt;h2 id=&quot;“我怎么会学java呢？”&quot;&gt;&lt;a href=&quot;#“我怎么会学java呢？”&quot; class=&quot;headerlink&quot; title=&quot;“我怎么会学java呢？”&quot;&gt;&lt;/a&gt;“我怎么会</summary>
      
    
    
    
    
    <category term="生活" scheme="https://github.com/KatzenyaSax/KatzenyaSax.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>docker的安装及使用</title>
    <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/24/152039/"/>
    <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/24/152039/</id>
    <published>2023-10-24T07:20:39.000Z</published>
    <updated>2023-10-28T05:49:50.143Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目的数据库和中间件都会部署在linux系统上，所以使用docker这一工具。</p><h1 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h1><p>如果嫌麻烦，可以直接安装最新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>安装指定版本可以参考：<a href="https://zhuanlan.zhihu.com/p/143156163">如何在 Ubuntu 20.04 上安装和使用 Docker</a></p><h1 id="docker的运行及配置"><a href="#docker的运行及配置" class="headerlink" title="docker的运行及配置"></a>docker的运行及配置</h1><h2 id="运行docker"><a href="#运行docker" class="headerlink" title="运行docker"></a>运行docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="查看docker现有的镜像"><a href="#查看docker现有的镜像" class="headerlink" title="查看docker现有的镜像"></a>查看docker现有的镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="设置docker开机自启动"><a href="#设置docker开机自启动" class="headerlink" title="设置docker开机自启动"></a>设置docker开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="容器开机自启动"><a href="#容器开机自启动" class="headerlink" title="容器开机自启动"></a>容器开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update (<span class="variable">$docker</span> ps -a -q) --restart=always</span><br></pre></td></tr></table></figure><h2 id="配置下载地址"><a href="#配置下载地址" class="headerlink" title="配置下载地址"></a>配置下载地址</h2><p>docker的配置最主要就是配置下载地址，选用国内的阿里云镜像下载地址，依次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json&lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;htte6jcuw6y. mirror.aliyuncscom&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>参考文献：<a href="https://developer.aliyun.com/article/1245481?spm=a2c6h.14164896.0.0.1a9a47c5JPNQiV&scm=20140722.S_community@@%E6%96%87%E7%AB%A0@@1245481._.ID_1245481-RL_docker%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F-LOC_search~UND~community~UND~item-OR_ser-V_3-">使用阿里云 docker 镜像加速</a></p><h1 id="使用例：docker安装mysql"><a href="#使用例：docker安装mysql" class="headerlink" title="使用例：docker安装mysql"></a>使用例：docker安装mysql</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>也就是下载mysql的标准镜像文件到本地docker库中</p><h2 id="创建mysql实例并运行"><a href="#创建mysql实例并运行" class="headerlink" title="创建mysql实例并运行"></a>创建mysql实例并运行</h2><p>好比java中类的概念，镜像文件就是Bean；docker创建实例的行为就好比Bean的实例化，只有先实例化一个Bean的对象才能够使用其中的方法；而docker的容器就是jvm栈区，用于存放实例化的对象。<br>现在我们试创建一个mysql的实例化并运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name mysql-test -p 3306:3306 -v /mydata/mysql/log:/var/log/mysql -v /mydata/mysql/data:/var/data/mysql -v /mydata/mysql/conf.d:/etc/mysql.d -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure><p>注意这行命令的参数可以体现docker虚拟化的一些特征：<br>-p port1:port2，即将软件在docker的内部端口port2映射到主机（linux设备）的port1端口，意思是访问主机的port1端口，相当于访问docker内部的port2端口；-v &#x2F;file1:&#x2F;file2，即将软件在docker内部的文件映射到本机的存储上，意思是修改主机的file1中的文件，就相当于修改了docker内部file2中的文件，二者具有同等效力；而-e就是mysql常规的参数，配置mysql的密码等，-itd就是-i、-t、-d合在一起的，-d作用就是将该容器以守护线程的形式后台开启<br>所以为什么docker会给出这些参数呢？因为docker运行的软件是一个黑匣子嘛，里面的所有东西外面都是不好看到的，所以要预留一些特殊通道供外面看到（访问）喽。<br>不过总之是运行起来了</p><p>但是用户也可以手动进入docker内部，例如进入一下mysql的内部文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ID /bin/bash</span><br></pre></td></tr></table></figure><p>-it表示交互关系，ID表示mysql的容器id，运行后docker不是分配了一个id嘛，取前三个就可以了。这里就不多演示了。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>之后写入mysql的配置文件，就在映射的文件 &#x2F;mydata&#x2F;mysql里写一个my.cnf：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">secure_file_priv=/var/lib/mysql</span><br><span class="line">expire_logs_days=7</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DAERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line">max_connections=1000</span><br><span class="line">​</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">​</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>主要是为了配置utf编码</p><h2 id="完成安装"><a href="#完成安装" class="headerlink" title="完成安装"></a>完成安装</h2><p>最后重启容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart ID</span><br></pre></td></tr></table></figure><p>依然是取前三个就行了</p><p>这样就算安装完成了，外部机器访问本机（linux设备）的3306端口就可以访问到mysql了</p><h1 id="使用例：docker安装redis"><a href="#使用例：docker安装redis" class="headerlink" title="使用例：docker安装redis"></a>使用例：docker安装redis</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>拉取镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><h2 id="创建实例并运行"><a href="#创建实例并运行" class="headerlink" title="创建实例并运行"></a>创建实例并运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis-test -p 6379:6379 -v /mydata/redis/data:/data -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>redis默认指定的端口是6379<br>其中-d表示以&#x2F;etc&#x2F;redis&#x2F;redis.conf中的配置文件后台运行，而&#x2F;etc&#x2F;redis&#x2F;redis.conf不是映射到&#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf了吗？所以实际上在外部配置配置文件就可以了。<br>配置就不多说了，最主要的持久化功能新版redis已经默认支持了</p><h2 id="完成安装-1"><a href="#完成安装-1" class="headerlink" title="完成安装"></a>完成安装</h2><p>外部机器访问本机（linux设备）的6379端口就可以访问到redis了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于项目的数据库和中间件都会部署在linux系统上，所以使用docker这一工具。&lt;/p&gt;
&lt;h1 id=&quot;docker的安装&quot;&gt;&lt;a href=&quot;#docker的安装&quot; class=&quot;headerlink&quot; title=&quot;docker的安装&quot;&gt;&lt;/a&gt;docker的安装&lt;</summary>
      
    
    
    
    
    <category term="中间件" scheme="https://github.com/KatzenyaSax/KatzenyaSax.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/24/101439/"/>
    <id>https://github.com/KatzenyaSax/KatzenyaSax.github.io/2023/10/24/101439/</id>
    <published>2023-10-24T02:14:26.000Z</published>
    <updated>2023-10-24T09:15:10.321Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
